# Name of your application. Used to uniquely configure containers.
service: aladin_notifier

# Name of the container image.
image: malkog/aladin_notifier

# Deploy to these servers.
servers:
  web:
    hosts:
      - feed.kodingwarrior.dev
    labels:
      traefik.http.routers.feed_kodingwarrior.rule: Host(`feed.kodingwarrior.dev`)
      traefik.http.routers.feed_kodingwarrior_secure.entrypoints: websecure
      traefik.http.routers.feed_kodingwarrior_secure.rule: Host(`feed.kodingwarrior.dev`)
      traefik.http.routers.feed_kodingwarrior_secure.tls: true
      traefik.http.routers.feed_kodingwarrior_secure.tls.certresolver: letsencrypt
    options:
      network: private

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  server: ghcr.io
  username: malkoG

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
env:
  clear:
    DB_HOST: <%= ENV['DB_HOST'] %>
  secret:
    - RAILS_MASTER_KEY
    - ALADIN_TTB_KEY
    - MASTODON_ACCESS_TOKEN
    - POSTGRES_PASSWORD
    - DB_HOST
    - ALADIN_TELEGRAM_BOT_TOKEN
    - ALADIN_TELEGRAM_CHANNEL_ID

# Use a different ssh user than root
ssh:
  user: kojima-feed

# Configure builder setup.
builder:
  multiarch: false
  args:
    RUBY_VERSION: 3.3.6
    ALADIN_TTB_KEY: <%= ENV['ALADIN_TTB_KEY'] %>
    MASTODON_ACCESS_TOKEN: <%= ENV['MASTODON_ACCESS_TOKEN'] %>
    POSTGRES_PASSWORD: <%= ENV['POSTGRES_PASSWORD'] %>
    RAILS_MASTER_KEY: <%= ENV['RAILS_MASTER_KEY'] %>
    DB_HOST: <%= ENV['DB_HOST'] %>
    ALADIN_TELEGRAM_BOT_TOKEN: <%= ENV["ALADIN_TELEGRAM_BOT_TOKEN"] %>
    ALADIN_TELEGRAM_CHANNEL_ID: <%= ENV["ALADIN_TELEGRAM_CHANNEL_ID"] %>

# Use accessory services (secrets come from .env).
accessories:
  db:
    image: postgres:15
    host: <%= ENV['DB_HOST'] %>
    port: 5432
    env:
      clear:
        POSTGRES_USER: 'aladin_notifier'
        POSTGRES_DB: 'aladin_notifier_production'
      secret:
        - POSTGRES_PASSWORD
    files:
      - config/init.sql:/docker-entrypoint-initdb.d/setup.sql
    directories:
      - data:/var/lib/postgresql/data
    options:
      network: private

asset_path: /rails/public/assets

# Configure custom arguments for Traefik
traefik:
  args:
    accesslog: true
    accesslog.format: json

# Configure a custom healthcheck (default is /up on port 3000)
# healthcheck:
#   path: /healthz
#   port: 4000

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
# asset_path: /rails/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Configure the role used to determine the primary_host. This host takes
# deploy locks, runs health checks during the deploy, and follow logs, etc.
#
# Caution: there's no support for role renaming yet, so be careful to cleanup
#          the previous role on the deployed hosts.
# primary_role: web

# Controls if we abort when see a role with no hosts. Disabling this may be
# useful for more complex deploy configurations.
#
# allow_empty_roles: false


traefik:
  options:
    publish:
      - "8080:8080"
      - "443:443"
      - "3000:3000"
    volume:
      - "/letsencrypt:/letsencrypt"
    network: "private"
  args:
    api.dashboard: true
    api.insecure: true
    entryPoints.web.address: ":80"
    entryPoints.websecure.address: ":443"
    # entryPoints.web.http.redirections.entryPoint.to: websecure
    # entryPoints.web.http.redirections.entryPoint.scheme: https
    # entryPoints.web.http.redirections.entrypoint.permanent: true
    certificatesResolvers.letsencrypt.acme.email: "rijgndqw012@gmail.com"
    certificatesResolvers.letsencrypt.acme.storage: "/letsencrypt/acme.json"
    certificatesResolvers.letsencrypt.acme.tlschallenge: true
    certificatesResolvers.letsencrypt.acme.httpchallenge: true
    certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web
  labels:
    traefik.enable: true
    traefik.http.routers.catchall.entrypoints: websecure
    traefik.http.routers.catchall.rule: HostRegexp(`{host:.+}`)
    traefik.http.routers.catchall.service: noop@internal
    traefik.http.routers.catchall.priority: 1
    traefik.http.routers.dashboard.rule: Host(`feed.kodingwarrior.dev`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
    traefik.http.routers.dashboard.service: api@internal
    traefik.http.routers.dashboard.middlewares: auth
